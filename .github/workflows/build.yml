name: Build and Scan
on:
  push:
    branches:
      - master # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]
jobs:

  check-modified-files:
    name: Check modified files
    outputs:
      run_cli: ${{ steps.check_files.outputs.run_cli }}
      run_maven: ${{ steps.check_files.outputs.run_maven }}
      run_gradle: ${{ steps.check_files.outputs.run_gradle }}
      run_dotnet: ${{ steps.check_files.outputs.run_dotnet }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          build_cli=0
          build_maven=0
          build_gradle=0
          build_dotnet=0
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            dir=$(echo $file|cut -d '/' -f 1)
            if [[ $dir == comp-cli ]]; then
              build_cli=1
            elif [[ $dir == comp-maven ]]; then
              build_maven=1
            elif [[ $dir == comp-gradle ]]; then
              build_gradle=1
            elif [[ $dir == comp-dotnet ]]; then
              build_dotnet=1
            fi
          done < files.txt
          if [[ $build_cli == 1 ]]; then
            echo "::set-output name=run_cli::true"
          else
            echo "::set-output name=run_cli::false"
          fi
          if [[ $build_maven == 1 ]]; then
            echo "::set-output name=run_maven::true"
          else
            echo "::set-output name=run_maven::false"
          fi
          if [[ $build_gradle == 1 ]]; then
            echo "::set-output name=run_gradle::true"
          else
            echo "::set-output name=run_gradle::false"
          fi
          if [[ $build_dotnet == 1 ]]; then
            echo "::set-output name=run_dotnet::true"
          else
            echo "::set-output name=run_dotnet::false"
          fi
  #----------------- CLI scan ---------------------
  scan-cli:
    needs: check-modified-files
    if: needs.check-modified-files.outputs.run_cli == 'true'
    runs-on: ubuntu-latest
    #strategy:
    #  matrix:
    #    python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint bandit pytest coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      #- name: Lint with flake8
      #  run: |
      #    stop the build if there are Python syntax errors or undefined names
      #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #    exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #     run: |
      #       pytest
      - name: Run tests
        working-directory: ./comp-cli
        run: ./run_tests.sh
      - name: Run linters
        working-directory: ./comp-cli
        run: ./run_linters.sh
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Analyze CLI comp
        uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_BASE_DIR: comp-cli
          SONAR_VERBOSE: true
        with:
          sonar.projectBaseDir: comp-cli
          sonar.verbose: true
          sonar.qualitygate.wait: false

  #----------------- Maven scan --------------------
  scan-maven:
    needs: check-modified-files
    if: needs.check-modified-files.outputs.run_maven == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze maven component
        working-directory: ./comp-maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B clean verify sonar:sonar \
            -Dsonar.projectKey="demo:github-comp-maven" \
            -Dsonar.projectName="GitHub project - Maven"

  #----------------- Gradle scan --------------------
  scan-gradle:
    needs: check-modified-files
    if: needs.check-modified-files.outputs.run_gradle == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #- name: Set up JDK 11
      #  uses: actions/setup-java@v1
      #  with:
      #    java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze gradle component
        working-directory: ./comp-gradle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: ./gradlew build sonarqube --info

  #----------------- .Net scan --------------------
  scan-dotnet:
    needs: check-modified-files
    if: needs.check-modified-files.outputs.run_dotnet == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache Scanner for .Net
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-dotnet-scan
          restore-keys: ${{ runner.os }}-dotnet-scan
      - name: Install Scanner for .Net
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          dotnet tool update dotnet-sonarscanner --global
      - name: Build and analyze .Net component
        working-directory: ./comp-dotnet
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: pwsh
        run: |
          dotnet-sonarscanner begin /k:"demo:github-comp-dotnet" /n:"GitHub project - .Net Core" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
