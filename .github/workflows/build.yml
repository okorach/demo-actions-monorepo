name: Build and Scan

env:
  tags: 'github,actions,github-actions,monorepo'
  projectRootKey: 'demo:github-actions-mono'

on:
  push:
    branches:
      - master # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]
  # schedule:
  #  - cron: '17 0 * * 4'
jobs:
  #----------------- Check what to build ---------------------
  check-what-to-build:
    name: Check what to build
    outputs:
      run_cli: ${{ steps.check_files.outputs.run_cli }}
      run_maven: ${{ steps.check_files.outputs.run_maven }}
      run_gradle: ${{ steps.check_files.outputs.run_gradle }}
      run_dotnet: ${{ steps.check_files.outputs.run_dotnet }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: check branch and modified files
        id: check_files
        run: |
          echo "=== Checking branch name"
          branch_name=`echo ${GITHUB_REF#refs/heads/}`
          shopt -s extglob
          if [[ $branch_name == "(f/).*" ]]; then
            echo "=== Branch name '$branch_name' hints at full rebuild"
            read -r build_cli build_maven build_gradle build_dotnet <<< "true true true true"
          else
            echo "=== Smart rebuild"
            read -r build_cli build_maven build_gradle build_dotnet <<< "false false false false"
            git diff --name-only HEAD^ HEAD > files.txt
            while IFS= read -r file
            do
              echo $file
              if [[ "$file" == ".github/workflows/build.yml" ]]; then
                echo "=== Main workflow file changed --> full rebuild"
                read -r build_cli build_maven build_gradle build_dotnet <<< "true true true true"
                break
              fi
              dir=$(echo $file|cut -d '/' -f 1)
              if [[ $dir == comp-cli ]]; then
                build_cli="true"
              elif [[ $dir == comp-maven ]]; then
                build_maven="true"
              elif [[ $dir == comp-gradle ]]; then
                build_gradle="true"
              elif [[ $dir == comp-dotnet ]]; then
                build_dotnet="true"
              fi
            done < files.txt
          fi
          echo "::set-output name=run_cli::$build_cli"
          echo "::set-output name=run_maven::$build_maven"
          echo "::set-output name=run_gradle::$build_gradle"
          echo "::set-output name=run_dotnet::$build_dotnet"
          # Set project tags on the fly
          for postfix in cli maven gradle dotnet
          do
            curl -X POST -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/project_tags/set?project=${{env.projectRootKey}}-$postfix&tags=${{env.tags}},$postfix"
          done
  #----------------- CLI scan ---------------------
  skipped-cli-qg:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_cli == 'false'
    name: "[GitHub project] SonarQube Code Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Exit with success
        run: exit 0
  scan-cli:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_cli == 'true'
    runs-on: ubuntu-latest
    #strategy:
    #  matrix:
    #    python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint bandit pytest coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      #- name: Lint with flake8
      #  run: |
      #    stop the build if there are Python syntax errors or undefined names
      #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #    exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #     run: |
      #       pytest
      - name: Run tests
        working-directory: ./comp-cli
        run: ./run_tests.sh
      - name: Run linters
        working-directory: ./comp-cli
        run: ./run_linters.sh
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Analyze CLI comp
        uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_BASE_DIR: comp-cli
          SONAR_VERBOSE: true
        with:
          sonar.projectBaseDir: comp-cli
          sonar.verbose: true
          sonar.qualitygate.wait: false

  #----------------- Maven scan --------------------

  sq-maven:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_maven == 'false'
    name: "[GitHub project - Maven] SonarQube Code Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Exit with success
        run: exit 0
  scan-maven:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_maven == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze maven component
        working-directory: ./comp-maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report sonar:sonar

  #----------------- Gradle scan --------------------
  skip-gradle-qg:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_gradle == 'false'
    runs-on: ubuntu-latest
    name: "[GitHub project - Gradle] SonarQube Code Analysis"
    steps:
      - name: Exit with success
        run: exit 0
  scan-gradle:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_gradle == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze gradle component
        working-directory: ./comp-gradle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: gradle build sonar --info --debug --stacktrace

  #----------------- .Net scan --------------------
  skip-dotnet-qg:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_dotnet == 'false'
    name: "[GitHub project - .Net Core] SonarQube Code Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Exit with success
        run: exit 0
  scan-dotnet:
    needs: check-what-to-build
    if: needs.check-what-to-build.outputs.run_dotnet == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Scanner for .Net
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-dotnet-scan
          restore-keys: ${{ runner.os }}-dotnet-scan
      - name: Install Scanner for .Net
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          dotnet tool update dotnet-sonarscanner --global
      - name: Build and analyze .Net component
        working-directory: ./comp-dotnet
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: pwsh
        run: |
          dotnet-sonarscanner begin /k:"${{env.projectRootKey}}-dotnet" /n:"GitHub / Actions / monorepo .Net Core" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  code-ql:
    name: CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'java', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
